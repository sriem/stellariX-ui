{"version":3,"sources":["../src/index.ts","../src/state.ts","../src/logic.ts"],"sourcesContent":["import { createPrimitive } from '@stellarix/core';\r\nimport { createSpinnerState } from './state.js';\r\nimport { createSpinnerLogic } from './logic.js';\r\nimport type { SpinnerOptions, SpinnerState, SpinnerEvents } from './types.js';\r\n\r\nexport function createSpinner(options: SpinnerOptions = {}) {\r\n    return createPrimitive<SpinnerState, SpinnerEvents, SpinnerOptions>('Spinner', {\r\n        initialState: options,\r\n        logicConfig: options,\r\n        metadata: {\r\n            accessibility: {\r\n                role: 'status',\r\n                keyboardShortcuts: [],\r\n                ariaAttributes: ['aria-busy', 'aria-label', 'aria-live'],\r\n                wcagLevel: 'AA',\r\n                patterns: []\r\n            },\r\n            events: {\r\n                supported: [],\r\n                required: [],\r\n                custom: {}\r\n            },\r\n            structure: {\r\n                elements: {\r\n                    'root': {\r\n                        type: 'div',\r\n                        role: 'status',\r\n                        optional: false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Create the component factory with proper state and logic\r\nexport function createSpinnerWithImplementation(options: SpinnerOptions = {}) {\r\n    const core = createSpinner(options);\r\n    \r\n    // Attach the actual implementation\r\n    core.state = createSpinnerState(options);\r\n    core.logic = createSpinnerLogic(core.state as any, options);\r\n    \r\n    return core;\r\n}\r\n\r\n// Re-export types\r\nexport type { SpinnerOptions, SpinnerState, SpinnerEvents, SpinnerProps, SpinnerSize } from './types.js';\r\nexport type { SpinnerStateStore } from './state.js';\r\n\r\n// Default export for convenience\r\nexport default createSpinnerWithImplementation;","/**\r\n * Spinner Component State Management\r\n * Ultra-generic state implementation\r\n */\r\n\r\nimport { createComponentState } from '@stellarix/core';\r\nimport type { SpinnerState, SpinnerOptions, SpinnerSize } from './types';\r\n\r\n/**\r\n * Extended state store with component-specific methods\r\n */\r\nexport interface SpinnerStateStore {\r\n    // Core state methods\r\n    getState: () => SpinnerState;\r\n    setState: (updates: Partial<SpinnerState>) => void;\r\n    subscribe: (listener: (state: SpinnerState) => void) => () => void;\r\n    derive: <U>(selector: (state: SpinnerState) => U) => {\r\n        get: () => U;\r\n        subscribe: (listener: (value: U) => void) => () => void;\r\n    };\r\n    \r\n    // Component-specific methods\r\n    start: () => void;\r\n    stop: () => void;\r\n    setSize: (size: SpinnerSize) => void;\r\n    setColor: (color: string | undefined) => void;\r\n    setLabel: (label: string) => void;\r\n    setSpeed: (speed: number) => void;\r\n}\r\n\r\n/**\r\n * Creates the spinner component state\r\n * @param options Initial options\r\n * @returns Extended state store\r\n */\r\nexport function createSpinnerState(options: SpinnerOptions = {}): SpinnerStateStore {\r\n    // Define initial state\r\n    const initialState: SpinnerState = {\r\n        spinning: options.spinning ?? true,\r\n        size: options.size ?? 'md',\r\n        color: options.color,\r\n        label: options.label ?? 'Loading...',\r\n        speed: options.speed ?? 750,\r\n    };\r\n    \r\n    // Create the core state store\r\n    const store = createComponentState('Spinner', initialState);\r\n    \r\n    // Extend with component-specific methods\r\n    const extendedStore: SpinnerStateStore = {\r\n        ...store,\r\n        \r\n        // Start spinning\r\n        start: () => {\r\n            store.setState({ spinning: true });\r\n        },\r\n        \r\n        // Stop spinning\r\n        stop: () => {\r\n            store.setState({ spinning: false });\r\n        },\r\n        \r\n        // Convenience setters\r\n        setSize: (size: SpinnerSize) => {\r\n            store.setState({ size });\r\n        },\r\n        \r\n        setColor: (color: string | undefined) => {\r\n            store.setState({ color });\r\n        },\r\n        \r\n        setLabel: (label: string) => {\r\n            store.setState({ label });\r\n        },\r\n        \r\n        setSpeed: (speed: number) => {\r\n            store.setState({ speed });\r\n        },\r\n    };\r\n    \r\n    return extendedStore;\r\n}","/**\r\n * Spinner Component Logic\r\n * Business logic and event handling\r\n */\r\n\r\nimport type { LogicLayer } from '@stellarix/core';\r\nimport type { SpinnerState, SpinnerEvents, SpinnerOptions } from './types';\r\nimport type { SpinnerStateStore } from './state';\r\n\r\n/**\r\n * Creates the spinner component logic\r\n * @param state State store to connect to\r\n * @param options Component options\r\n * @returns Logic layer for the component\r\n */\r\nexport function createSpinnerLogic(\r\n    state: SpinnerStateStore,\r\n    options: SpinnerOptions = {}\r\n): LogicLayer<SpinnerState, SpinnerEvents> {\r\n    // Spinner has no events or interactions - it's purely visual\r\n    // We need to implement a minimal LogicLayer interface\r\n    \r\n    let connectedStore: SpinnerStateStore | null = null;\r\n    let initialized = false;\r\n\r\n    return {\r\n        componentType: 'Spinner',\r\n\r\n        connect: (stateStore: any) => {\r\n            connectedStore = stateStore;\r\n        },\r\n\r\n        disconnect: () => {\r\n            connectedStore = null;\r\n        },\r\n\r\n        initialize: () => {\r\n            if (initialized) return () => {};\r\n            initialized = true;\r\n\r\n            // Spinner doesn't need initialization\r\n            return () => {\r\n                initialized = false;\r\n            };\r\n        },\r\n\r\n        handleEvent: (eventType: keyof SpinnerEvents, payload: any) => {\r\n            // Spinner has no events\r\n        },\r\n\r\n        getInteractionHandlers: (elementType: string) => {\r\n            // Spinner has no interactions\r\n            const currentState = state.getState();\r\n            \r\n            return {\r\n                // No event handlers needed\r\n                // But we can provide DOM attributes\r\n                role: 'status',\r\n                'aria-busy': currentState.spinning,\r\n                'aria-label': currentState.label,\r\n            };\r\n        },\r\n\r\n        getA11yProps: (elementType: string) => {\r\n            const currentState = state.getState();\r\n            \r\n            return {\r\n                role: 'status',\r\n                'aria-busy': currentState.spinning,\r\n                'aria-label': currentState.label,\r\n                'aria-live': 'polite',\r\n            };\r\n        },\r\n\r\n        getElementMetadata: () => ({\r\n            root: {\r\n                type: 'div',\r\n                role: 'status',\r\n                optional: false,\r\n            },\r\n        }),\r\n\r\n        getEventMetadata: () => ({\r\n            supported: [],\r\n            required: [],\r\n            custom: {},\r\n        }),\r\n    };\r\n}"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,EAAA,oCAAAC,EAAA,YAAAC,IAAA,eAAAC,EAAAL,GAAA,IAAAM,EAAgC,2BCKhC,IAAAC,EAAqC,2BA8B9B,SAASC,EAAmBC,EAA0B,CAAC,EAAsB,CAEhF,IAAMC,EAA6B,CAC/B,SAAUD,EAAQ,UAAY,GAC9B,KAAMA,EAAQ,MAAQ,KACtB,MAAOA,EAAQ,MACf,MAAOA,EAAQ,OAAS,aACxB,MAAOA,EAAQ,OAAS,GAC5B,EAGME,KAAQ,wBAAqB,UAAWD,CAAY,EAkC1D,MA/ByC,CACrC,GAAGC,EAGH,MAAO,IAAM,CACTA,EAAM,SAAS,CAAE,SAAU,EAAK,CAAC,CACrC,EAGA,KAAM,IAAM,CACRA,EAAM,SAAS,CAAE,SAAU,EAAM,CAAC,CACtC,EAGA,QAAUC,GAAsB,CAC5BD,EAAM,SAAS,CAAE,KAAAC,CAAK,CAAC,CAC3B,EAEA,SAAWC,GAA8B,CACrCF,EAAM,SAAS,CAAE,MAAAE,CAAM,CAAC,CAC5B,EAEA,SAAWC,GAAkB,CACzBH,EAAM,SAAS,CAAE,MAAAG,CAAM,CAAC,CAC5B,EAEA,SAAWC,GAAkB,CACzBJ,EAAM,SAAS,CAAE,MAAAI,CAAM,CAAC,CAC5B,CACJ,CAGJ,CClEO,SAASC,EACZC,EACAC,EAA0B,CAAC,EACY,CAIvC,IAAIC,EAA2C,KAC3CC,EAAc,GAElB,MAAO,CACH,cAAe,UAEf,QAAUC,GAAoB,CAC1BF,EAAiBE,CACrB,EAEA,WAAY,IAAM,CACdF,EAAiB,IACrB,EAEA,WAAY,IACJC,EAAoB,IAAM,CAAC,GAC/BA,EAAc,GAGP,IAAM,CACTA,EAAc,EAClB,GAGJ,YAAa,CAACE,EAAgCC,IAAiB,CAE/D,EAEA,uBAAyBC,GAAwB,CAE7C,IAAMC,EAAeR,EAAM,SAAS,EAEpC,MAAO,CAGH,KAAM,SACN,YAAaQ,EAAa,SAC1B,aAAcA,EAAa,KAC/B,CACJ,EAEA,aAAeD,GAAwB,CACnC,IAAMC,EAAeR,EAAM,SAAS,EAEpC,MAAO,CACH,KAAM,SACN,YAAaQ,EAAa,SAC1B,aAAcA,EAAa,MAC3B,YAAa,QACjB,CACJ,EAEA,mBAAoB,KAAO,CACvB,KAAM,CACF,KAAM,MACN,KAAM,SACN,SAAU,EACd,CACJ,GAEA,iBAAkB,KAAO,CACrB,UAAW,CAAC,EACZ,SAAU,CAAC,EACX,OAAQ,CAAC,CACb,EACJ,CACJ,CFnFO,SAASC,EAAcC,EAA0B,CAAC,EAAG,CACxD,SAAO,mBAA6D,UAAW,CAC3E,aAAcA,EACd,YAAaA,EACb,SAAU,CACN,cAAe,CACX,KAAM,SACN,kBAAmB,CAAC,EACpB,eAAgB,CAAC,YAAa,aAAc,WAAW,EACvD,UAAW,KACX,SAAU,CAAC,CACf,EACA,OAAQ,CACJ,UAAW,CAAC,EACZ,SAAU,CAAC,EACX,OAAQ,CAAC,CACb,EACA,UAAW,CACP,SAAU,CACN,KAAQ,CACJ,KAAM,MACN,KAAM,SACN,SAAU,EACd,CACJ,CACJ,CACJ,CACJ,CAAC,CACL,CAGO,SAASC,EAAgCD,EAA0B,CAAC,EAAG,CAC1E,IAAME,EAAOH,EAAcC,CAAO,EAGlC,OAAAE,EAAK,MAAQC,EAAmBH,CAAO,EACvCE,EAAK,MAAQE,EAAmBF,EAAK,MAAcF,CAAO,EAEnDE,CACX,CAOA,IAAOG,EAAQJ","names":["src_exports","__export","createSpinner","createSpinnerWithImplementation","src_default","__toCommonJS","import_core","import_core","createSpinnerState","options","initialState","store","size","color","label","speed","createSpinnerLogic","state","options","connectedStore","initialized","stateStore","eventType","payload","elementType","currentState","createSpinner","options","createSpinnerWithImplementation","core","createSpinnerState","createSpinnerLogic","src_default"]}