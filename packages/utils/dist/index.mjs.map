{"version":3,"sources":["../src/id.ts","../src/dom.ts","../src/accessibility.ts","../src/object.ts","../src/index.ts"],"sourcesContent":["// Utility for generating unique IDs\r\nlet idCounter = 0;\r\n\r\nexport function generateId(prefix = 'stellarix'): string {\r\n  return `${prefix}-${Date.now()}-${++idCounter}`;\r\n}\r\n\r\nexport function generateUniqueId(): string {\r\n  return generateId('sx');\r\n}\r\n\r\n// For specific component types\r\nexport function generateComponentId(componentName: string): string {\r\n  return generateId(componentName.toLowerCase());\r\n}\r\n\r\n// Generate ARIA IDs\r\nexport function generateAriaId(prefix = 'aria'): string {\r\n  return generateId(prefix);\r\n}","/**\n * DOM Utilities\n * Helper functions for DOM manipulation\n */\n\n/**\n * Checks if the current environment is a browser\n * @returns True if in a browser environment, false otherwise\n */\nexport const isBrowser = () => typeof window !== 'undefined';\n\n/**\n * Gets an element by ID with proper typing\n * @param id Element ID\n * @returns The element or null if not found\n */\nexport function getElementById<T extends HTMLElement = HTMLElement>(id: string): T | null {\n    return isBrowser() ? document.getElementById(id) as T | null : null;\n}\n\n/**\n * Focuses an element with proper error handling\n * @param element The element to focus\n * @returns True if focus was successful, false otherwise\n */\nexport function focusElement(element: HTMLElement | null): boolean {\n    if (element && typeof element.focus === 'function') {\n        try {\n            element.focus();\n            return document.activeElement === element;\n        } catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\n\n/**\n * Creates a DOM element with attributes and properties\n * @param tagName HTML tag name\n * @param attributes Attributes to set\n * @returns The created element\n */\nexport function createElement<T extends HTMLElement>(\n    tagName: string,\n    attributes: Record<string, string> = {}\n): T {\n    const element = document.createElement(tagName) as T;\n\n    Object.entries(attributes).forEach(([key, value]) => {\n        element.setAttribute(key, value);\n    });\n\n    return element;\n}\n\n/**\n * Generates a unique ID with an optional prefix\n * @param prefix Optional prefix for the ID\n * @returns A unique ID string\n */\nexport function generateId(prefix: string = 'stellarix'): string {\n    const randomPart = Math.random().toString(36).substring(2, 10);\n    return `${prefix}-${randomPart}`;\n}\n\n/**\n * Adds a global event listener that can be safely removed\n * @param eventName Event name\n * @param handler Event handler\n * @param options Event listener options\n * @returns Function to remove the event listener\n */\nexport function addGlobalEventListener<K extends keyof WindowEventMap>(\n    eventName: K,\n    handler: (event: WindowEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n): () => void {\n    if (!isBrowser()) return () => { };\n\n    window.addEventListener(eventName, handler as EventListener, options);\n    return () => {\n        window.removeEventListener(eventName, handler as EventListener, options);\n    };\n} ","/**\r\n * Accessibility Utilities\r\n * Helper functions for WCAG compliance and accessibility\r\n */\r\n\r\nimport { isBrowser } from './dom';\r\n\r\n/**\r\n * ARIA roles\r\n */\r\nexport enum AriaRole {\r\n    Button = 'button',\r\n    Checkbox = 'checkbox',\r\n    Dialog = 'dialog',\r\n    ListBox = 'listbox',\r\n    Menu = 'menu',\r\n    MenuItem = 'menuitem',\r\n    Option = 'option',\r\n    Switch = 'switch',\r\n    Tab = 'tab',\r\n    TabList = 'tablist',\r\n    TabPanel = 'tabpanel',\r\n    Toolbar = 'toolbar',\r\n}\r\n\r\n/**\r\n * Creates aria attributes for a button\r\n * @param isPressed Whether the button is pressed\r\n * @param isDisabled Whether the button is disabled\r\n * @returns ARIA attributes\r\n */\r\nexport function getButtonA11yProps(isPressed?: boolean, isDisabled?: boolean) {\r\n    return {\r\n        role: AriaRole.Button,\r\n        'aria-pressed': isPressed ? 'true' : undefined,\r\n        'aria-disabled': isDisabled ? 'true' : undefined,\r\n    };\r\n}\r\n\r\n/**\r\n * Creates aria attributes for a checkbox\r\n * @param checked Whether the checkbox is checked\r\n * @param isDisabled Whether the checkbox is disabled\r\n * @returns ARIA attributes\r\n */\r\nexport function getCheckboxA11yProps(checked?: boolean, isDisabled?: boolean) {\r\n    return {\r\n        role: AriaRole.Checkbox,\r\n        'aria-checked': typeof checked === 'boolean' ? String(checked) : undefined,\r\n        'aria-disabled': isDisabled ? 'true' : undefined,\r\n    };\r\n}\r\n\r\n/**\r\n * Gets the first focusable element in a container\r\n * @param container The container element\r\n * @returns The first focusable element or null\r\n */\r\nexport function getFirstFocusableElement(container: HTMLElement): HTMLElement | null {\r\n    if (!isBrowser() || !container) return null;\r\n\r\n    const focusableElements = container.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n    );\r\n\r\n    return focusableElements.length > 0 ? focusableElements[0] as HTMLElement : null;\r\n}\r\n\r\n/**\r\n * Creates a focus trap within a container\r\n * @param container The container element\r\n * @returns Functions to activate and deactivate the focus trap\r\n */\r\nexport function createFocusTrap(container: HTMLElement | null) {\r\n    if (!isBrowser() || !container) {\r\n        return {\r\n            activate: () => { },\r\n            deactivate: () => { },\r\n        };\r\n    }\r\n\r\n    let previouslyFocusedElement: HTMLElement | null = null;\r\n\r\n    const focusableElements = container.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n    );\r\n\r\n    const firstElement = focusableElements[0] as HTMLElement | undefined;\r\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement | undefined;\r\n\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (event.key !== 'Tab') return;\r\n\r\n        if (!firstElement || !lastElement) return;\r\n\r\n        if (event.shiftKey) {\r\n            if (document.activeElement === firstElement) {\r\n                lastElement.focus();\r\n                event.preventDefault();\r\n            }\r\n        } else {\r\n            if (document.activeElement === lastElement) {\r\n                firstElement.focus();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        activate: () => {\r\n            previouslyFocusedElement = document.activeElement as HTMLElement;\r\n            container.addEventListener('keydown', handleKeyDown);\r\n            if (firstElement) {\r\n                firstElement.focus();\r\n            }\r\n        },\r\n        deactivate: () => {\r\n            container.removeEventListener('keydown', handleKeyDown);\r\n            if (previouslyFocusedElement) {\r\n                previouslyFocusedElement.focus();\r\n            }\r\n        },\r\n    };\r\n}\r\n\r\n// ARIA utilities\r\nexport function announceToScreenReader(message: string, priority: 'polite' | 'assertive' = 'polite'): void {\r\n  const announcer = document.createElement('div');\r\n  announcer.setAttribute('aria-live', priority);\r\n  announcer.setAttribute('aria-atomic', 'true');\r\n  announcer.className = 'sr-only';\r\n  announcer.style.cssText = `\r\n    position: absolute !important;\r\n    width: 1px !important;\r\n    height: 1px !important;\r\n    padding: 0 !important;\r\n    margin: -1px !important;\r\n    overflow: hidden !important;\r\n    clip: rect(0, 0, 0, 0) !important;\r\n    white-space: nowrap !important;\r\n    border: 0 !important;\r\n  `;\r\n\r\n  document.body.appendChild(announcer);\r\n  announcer.textContent = message;\r\n\r\n  // Clean up after announcement\r\n  setTimeout(() => {\r\n    if (document.body.contains(announcer)) {\r\n      document.body.removeChild(announcer);\r\n    }\r\n  }, 1000);\r\n} ","/**\r\n * Object Utilities\r\n * Helper functions for object manipulation\r\n */\r\n\r\n/**\r\n * Deep merges two objects\r\n * @param target Target object\r\n * @param source Source object\r\n * @returns Merged object\r\n */\r\nexport function deepMerge<T extends Record<string, any>, U extends Record<string, any>>(\r\n    target: T,\r\n    source: U\r\n): T & U {\r\n    const output = { ...target } as T & U;\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        Object.keys(source).forEach(key => {\r\n            if (isObject(source[key])) {\r\n                if (!(key in target)) {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                } else {\r\n                    output[key as keyof (T & U)] = deepMerge(\r\n                        target[key],\r\n                        source[key]\r\n                    ) as any;\r\n                }\r\n            } else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\n/**\r\n * Checks if a value is an object\r\n * @param item Value to check\r\n * @returns Whether the value is an object\r\n */\r\nexport function isObject(item: any): item is Record<string, any> {\r\n    return item !== null && typeof item === 'object' && !Array.isArray(item);\r\n}\r\n\r\n/**\r\n * Omits specified keys from an object\r\n * @param obj Source object\r\n * @param keys Keys to omit\r\n * @returns New object without the specified keys\r\n */\r\nexport function omit<T extends Record<string, any>, K extends keyof T>(\r\n    obj: T,\r\n    keys: K[]\r\n): Omit<T, K> {\r\n    const result = { ...obj };\r\n    keys.forEach(key => {\r\n        delete result[key];\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * Picks specified keys from an object\r\n * @param obj Source object\r\n * @param keys Keys to pick\r\n * @returns New object with only the specified keys\r\n */\r\nexport function pick<T extends Record<string, any>, K extends keyof T>(\r\n    obj: T,\r\n    keys: K[]\r\n): Pick<T, K> {\r\n    const result = {} as Pick<T, K>;\r\n    keys.forEach(key => {\r\n        if (key in obj) {\r\n            result[key] = obj[key];\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * Creates a memoized version of a function\r\n * @param fn Function to memoize\r\n * @returns Memoized function\r\n */\r\nexport function memoize<T extends (...args: any[]) => any>(fn: T): T {\r\n    const cache = new Map();\r\n\r\n    return ((...args: any[]) => {\r\n        const key = JSON.stringify(args);\r\n        if (cache.has(key)) {\r\n            return cache.get(key);\r\n        }\r\n\r\n        const result = fn(...args);\r\n        cache.set(key, result);\r\n        return result;\r\n    }) as T;\r\n}\r\n\r\nexport function isEmpty(value: any): boolean {\r\n  if (value == null) return true;\r\n  if (Array.isArray(value) || typeof value === 'string') return value.length === 0;\r\n  if (isObject(value)) return Object.keys(value).length === 0;\r\n  return false;\r\n} ","/**\r\n * StellarIX UI Utils\r\n * Utility functions for the StellarIX UI framework\r\n */\r\n\r\nexport * from './id';\r\nexport * from './accessibility';\r\nexport * from './object';\r\n\r\n// Re-export commonly used utilities\r\nexport {\r\n  generateId,\r\n  generateUniqueId,\r\n  generateComponentId,\r\n  generateAriaId\r\n} from './id';\r\n\r\nexport {\r\n  createFocusTrap,\r\n  announceToScreenReader\r\n} from './accessibility';\r\n\r\nexport {\r\n  deepMerge,\r\n  pick,\r\n  omit,\r\n  isEmpty\r\n} from './object';\r\n\r\n// Version\r\nexport const VERSION = '0.0.1'; "],"mappings":"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","names":["AriaRole"]}