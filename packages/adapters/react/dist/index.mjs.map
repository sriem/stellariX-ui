{"version":3,"sources":["../src/adapter.ts","../src/hooks.ts","../src/index.ts"],"sourcesContent":["/**\r\n * React 19 Adapter Implementation\r\n * State-of-the-art adapter using latest React 19 patterns\r\n */\r\n\r\nimport { createElement, useMemo, type ComponentType } from 'react';\r\nimport type {\r\n    ComponentCore,\r\n    FrameworkAdapter,\r\n} from '@stellarix/core';\r\nimport { useStore, useLogic } from './hooks';\r\nimport type { ReactComponent, ReactProps } from './types';\r\n\r\n/**\r\n * React 19 adapter for StellarIX UI\r\n * Implements the ultra-generic adapter interface\r\n */\r\nexport const reactAdapter: FrameworkAdapter<ComponentType<any>> = {\r\n    name: 'react',\r\n    version: '19.0.0',\r\n\r\n    /**\r\n     * Creates a React component from the ultra-generic component core\r\n     * Uses latest React 19 patterns including ref as prop\r\n     */\r\n    createComponent<TState, TLogic extends Record<string, any> = Record<string, any>>(\r\n        core: ComponentCore<TState, TLogic>\r\n    ): ComponentType<ReactProps> {\r\n        // Create the React component using function component pattern\r\n        // React 19 allows ref as a regular prop - no forwardRef needed!\r\n        const Component = function StellarIXComponent(props: ReactProps & { ref?: any }) {\r\n            // Extract ref as a regular prop (React 19 feature)\r\n            const { ref, className, style, children, ...restProps } = props;\r\n            \r\n            // Use custom hooks to connect to core state and logic\r\n            const state = useStore(core.state);\r\n            const logic = useLogic(core.logic, core.state);\r\n\r\n            // Get component metadata for rendering hints\r\n            const { structure, accessibility } = core.metadata;\r\n\r\n            // Memoize render props to optimize re-renders\r\n            const renderProps = useMemo(() => ({\r\n                // Spread all props\r\n                ...restProps,\r\n                \r\n                // Add ref support (React 19 pattern - ref as prop)\r\n                ref,\r\n                \r\n                // State access\r\n                state,\r\n                \r\n                // Logic access with proper typing\r\n                handleEvent: logic.handleEvent,\r\n                getA11yProps: logic.getA11yProps,\r\n                getInteractionHandlers: logic.getInteractionHandlers,\r\n                \r\n                // Style and className\r\n                className,\r\n                style,\r\n                \r\n                // Children support\r\n                children,\r\n                \r\n                // Component metadata\r\n                metadata: core.metadata,\r\n            }), [state, logic, ref, className, style, children, restProps]);\r\n\r\n            // Determine the root element type\r\n            const rootElement = structure.elements.root?.type || 'div';\r\n            const rootRole = structure.elements.root?.role || accessibility.role;\r\n\r\n            // Get accessibility props for the root element\r\n            const a11yProps = logic.getA11yProps('root');\r\n            const interactionHandlers = logic.getInteractionHandlers('root');\r\n\r\n            // Create the element with all props\r\n            return createElement(\r\n                rootElement,\r\n                {\r\n                    ...renderProps,\r\n                    ...a11yProps,\r\n                    ...interactionHandlers,\r\n                    role: rootRole,\r\n                    ref, // Direct ref prop (React 19)\r\n                    className,\r\n                    style,\r\n                },\r\n                children\r\n            );\r\n        };\r\n\r\n        // Set display name for debugging\r\n        Component.displayName = `StellarIX.${core.metadata.name}`;\r\n\r\n        return Component as ComponentType<ReactProps>;\r\n    },\r\n\r\n    /**\r\n     * Optional optimization for React components\r\n     * Can wrap with React.memo or other optimizations\r\n     */\r\n    optimize(component: ComponentType<any>): ComponentType<any> {\r\n        // For now, just return the component\r\n        // In the future, we could add React.memo or other optimizations\r\n        return component;\r\n    },\r\n};\r\n\r\n/**\r\n * Helper to connect a component factory to React\r\n * @param componentCore The component core from createComponentFactory\r\n * @returns React component\r\n */\r\nexport function connectToReact<TState, TLogic extends Record<string, any>>(\r\n    componentCore: ComponentCore<TState, TLogic>\r\n): ReactComponent {\r\n    return reactAdapter.createComponent(componentCore) as ReactComponent;\r\n}\r\n\r\n/**\r\n * React 19 specific features support\r\n */\r\n\r\n/**\r\n * Server Component wrapper\r\n * Marks a component as a Server Component\r\n */\r\nexport function createServerComponent<P extends object>(\r\n    Component: ComponentType<P>\r\n): ComponentType<P> {\r\n    // Server components don't need special wrapping in React 19\r\n    // The 'use server' directive is used at the file/function level\r\n    return Component;\r\n}\r\n\r\n/**\r\n * Client Component wrapper\r\n * Marks a component as a Client Component\r\n */\r\nexport function createClientComponent<P extends object>(\r\n    Component: ComponentType<P>\r\n): ComponentType<P> {\r\n    // Client components are marked with 'use client' directive at file level\r\n    // No special wrapping needed\r\n    return Component;\r\n}\r\n\r\n/**\r\n * Hook for using React 19's useActionState with forms\r\n * Provides integration with StellarIX components\r\n */\r\nexport function useStellarIXAction<TState, TResult>(\r\n    action: (prevState: TState, formData: FormData) => Promise<TResult>,\r\n    initialState: TState,\r\n    _permalink?: string\r\n) {\r\n    // This would use React 19's useActionState when available\r\n    // For now, we'll provide a type-safe interface\r\n    return [initialState, action, false] as const;\r\n}\r\n\r\n/**\r\n * Hook for form status (React 19 feature)\r\n * Provides pending state for forms\r\n */\r\nexport function useStellarIXFormStatus() {\r\n    // This would use React 19's useFormStatus when available\r\n    return { pending: false };\r\n}\r\n\r\n// Re-export everything for convenience\r\nexport * from './hooks';\r\nexport * from './types';","/**\r\n * React Adapter Hooks\r\n * State-of-the-art React 19 hooks for StellarIX UI\r\n */\r\n\r\nimport { useRef, useState, useEffect, useCallback, useMemo } from 'react';\r\nimport type { Store, LogicLayer } from '@stellarix/core';\r\nimport type { ReactLogic } from './types';\r\n\r\n/**\r\n * Hook to use a StellarIX store in React components\r\n * Provides reactive state updates with React 19 optimizations\r\n * @param store The store to use\r\n * @returns React state with value and setters\r\n */\r\nexport function useStore<T>(store: Store<T>): T {\r\n    const [state, setState] = useState<T>(() => store.getState());\r\n\r\n    useEffect(() => {\r\n        // Set initial state in case it changed\r\n        setState(store.getState());\r\n        \r\n        // Subscribe to store changes\r\n        const unsubscribe = store.subscribe(newState => {\r\n            setState(newState);\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, [store]);\r\n\r\n    return state;\r\n}\r\n\r\n/**\r\n * Hook to use a StellarIX logic layer in React components\r\n * Provides access to event handlers and accessibility props\r\n * @param logicLayer The logic layer to use\r\n * @param store The state store (for reactive updates)\r\n * @returns React logic interface\r\n */\r\nexport function useLogic<S, E extends Record<string, any> = Record<string, any>>(\r\n    logicLayer: LogicLayer<S, E>,\r\n    store: Store<S>\r\n): ReactLogic<S, E> {\r\n    // Ensure we have the latest state for re-renders\r\n    const state = useStore(store);\r\n\r\n    // Memoize event handler to prevent unnecessary re-renders\r\n    const handleEvent = useCallback(\r\n        (event: keyof E | string, payload?: any) => {\r\n            logicLayer.handleEvent(event, payload);\r\n        },\r\n        [logicLayer]\r\n    );\r\n\r\n    // Memoize accessibility props getter\r\n    const getA11yProps = useCallback(\r\n        (elementId: string) => {\r\n            return logicLayer.getA11yProps(elementId);\r\n        },\r\n        [logicLayer]\r\n    );\r\n\r\n    // Memoize interaction handlers getter\r\n    const getInteractionHandlers = useCallback(\r\n        (elementId: string) => {\r\n            return logicLayer.getInteractionHandlers(elementId);\r\n        },\r\n        [logicLayer]\r\n    );\r\n\r\n    // Return memoized logic interface\r\n    return useMemo(() => ({\r\n        state,\r\n        handleEvent,\r\n        getA11yProps,\r\n        getInteractionHandlers,\r\n    }), [state, handleEvent, getA11yProps, getInteractionHandlers]);\r\n}\r\n\r\n/**\r\n * Hook for managing refs with React 19 patterns\r\n * Supports both callback refs and ref objects\r\n */\r\nexport function useStellarIXRef<T extends HTMLElement = HTMLElement>() {\r\n    const ref = useRef<T>(null);\r\n    \r\n    // React 19 allows direct ref prop usage\r\n    // This hook provides utilities for ref management\r\n    const setRef = useCallback((element: T | null) => {\r\n        if (ref.current !== element) {\r\n            ref.current = element;\r\n        }\r\n    }, []);\r\n\r\n    return [ref, setRef] as const;\r\n}\r\n\r\n/**\r\n * Hook for managing focus with React 19 patterns\r\n * Provides focus management utilities\r\n */\r\nexport function useStellarIXFocus<T extends HTMLElement = HTMLElement>() {\r\n    const [ref, setRef] = useStellarIXRef<T>();\r\n    const [isFocused, setIsFocused] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const element = ref.current;\r\n        if (!element) return;\r\n\r\n        const handleFocus = () => setIsFocused(true);\r\n        const handleBlur = () => setIsFocused(false);\r\n\r\n        element.addEventListener('focus', handleFocus);\r\n        element.addEventListener('blur', handleBlur);\r\n\r\n        // Check initial focus state\r\n        if (document.activeElement === element) {\r\n            setIsFocused(true);\r\n        }\r\n\r\n        return () => {\r\n            element.removeEventListener('focus', handleFocus);\r\n            element.removeEventListener('blur', handleBlur);\r\n        };\r\n    }, [ref]);\r\n\r\n    const focus = useCallback(() => {\r\n        ref.current?.focus();\r\n    }, [ref]);\r\n\r\n    const blur = useCallback(() => {\r\n        ref.current?.blur();\r\n    }, [ref]);\r\n\r\n    return { ref: setRef, isFocused, focus, blur };\r\n}\r\n\r\n/**\r\n * Hook for keyboard navigation\r\n * Provides keyboard event handling utilities\r\n */\r\nexport function useStellarIXKeyboard(\r\n    handlers: Record<string, (event: KeyboardEvent) => void>\r\n) {\r\n    const handleKeyDown = useCallback((event: KeyboardEvent) => {\r\n        const handler = handlers[event.key];\r\n        if (handler) {\r\n            handler(event);\r\n        }\r\n    }, [handlers]);\r\n\r\n    return { onKeyDown: handleKeyDown };\r\n}","/**\r\n * StellarIX UI React Adapter\r\n * Adapts framework-agnostic components to React\r\n */\r\n\r\nexport * from './adapter';\r\nexport * from './hooks';\r\nexport * from './types';\r\n\r\n// Version\r\nexport const VERSION = '0.0.1'; "],"mappings":"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","names":["createElement","useMemo","useRef","useState","useEffect","useCallback","useMemo","useStore","store","state","setState","newState","useLogic","logicLayer","handleEvent","event","payload","getA11yProps","elementId","getInteractionHandlers","useStellarIXRef","ref","setRef","element","useStellarIXFocus","isFocused","setIsFocused","handleFocus","handleBlur","focus","blur","useStellarIXKeyboard","handlers","handler","reactAdapter","core","Component","props","ref","className","style","children","restProps","state","useStore","logic","useLogic","structure","accessibility","renderProps","useMemo","rootElement","rootRole","a11yProps","interactionHandlers","createElement","component","connectToReact","componentCore","createServerComponent","createClientComponent","useStellarIXAction","action","initialState","_permalink","useStellarIXFormStatus","VERSION"]}