{"version":3,"sources":["../src/index.ts","../src/state.ts","../src/logic.ts"],"sourcesContent":["/**\r\n * StellarIX UI Core\r\n * Framework-agnostic implementation of UI components\r\n */\r\n\r\n// Re-export from submodules\r\nexport * from './state';\r\nexport * from './logic';\r\nexport * from './types';\r\n\r\n// Version\r\nexport const VERSION = '0.0.1'; ","/**\r\n * State Management System\r\n * Framework-agnostic reactive state management\r\n */\r\n\r\nexport interface Store<T> {\r\n    getState: () => T;\r\n    setState: (updater: T | ((prev: T) => T)) => void;\r\n    subscribe: (listener: (state: T) => void) => () => void;\r\n}\r\n\r\n/**\r\n * Creates a reactive store with the given initial state\r\n * @param initialState The initial state\r\n * @returns A store object with methods to get, set, and subscribe to state\r\n */\r\nexport function createStore<T>(initialState: T): Store<T> {\r\n    let state = initialState;\r\n    const listeners = new Set<(state: T) => void>();\r\n\r\n    const getState = () => state;\r\n\r\n    const setState = (updater: T | ((prev: T) => T)) => {\r\n        state = typeof updater === 'function'\r\n            ? (updater as ((prev: T) => T))(state)\r\n            : updater;\r\n\r\n        listeners.forEach(listener => listener(state));\r\n    };\r\n\r\n    const subscribe = (listener: (state: T) => void) => {\r\n        listeners.add(listener);\r\n        return () => {\r\n            listeners.delete(listener);\r\n        };\r\n    };\r\n\r\n    return {\r\n        getState,\r\n        setState,\r\n        subscribe,\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a derived store based on a selector function\r\n * @param store The source store\r\n * @param selector A function to derive values from the source store\r\n * @returns A store with the derived state\r\n */\r\nexport function createDerivedStore<T, U>(\r\n    store: Store<T>,\r\n    selector: (state: T) => U\r\n): Store<U> {\r\n    const derivedStore = createStore<U>(selector(store.getState()));\r\n\r\n    store.subscribe(state => {\r\n        const newDerivedState = selector(state);\r\n        derivedStore.setState(newDerivedState);\r\n    });\r\n\r\n    return derivedStore;\r\n} ","/**\r\n * Logic Layer\r\n * Contains behavioral logic and accessibility requirements\r\n */\r\n\r\nimport type { Store } from './state';\r\n\r\nexport interface LogicLayer<StateType, EventsType = Record<string, any>> {\r\n    handleEvent: (event: keyof EventsType, payload?: any) => void;\r\n    getA11yProps: (elementId: string, state: StateType) => Record<string, any>;\r\n    getInteractionHandlers: (elementId: string) => Record<string, (event: any) => void>;\r\n}\r\n\r\n/**\r\n * Creates a logic layer connected to a state store\r\n * @param store The state store to connect to\r\n * @param handlers Event handlers mapping\r\n * @returns A logic layer object\r\n */\r\nexport function createLogicLayer<\r\n    StateType,\r\n    EventsType extends Record<string, any> = Record<string, any>\r\n>(\r\n    store: Store<StateType>,\r\n    handlers: {\r\n        [K in keyof EventsType]?: (state: StateType, payload: EventsType[K]) => Partial<StateType> | null;\r\n    },\r\n    a11yConfig: {\r\n        [elementId: string]: (state: StateType) => Record<string, any>;\r\n    } = {},\r\n    interactionConfig: {\r\n        [elementId: string]: {\r\n            [eventName: string]: (state: StateType, event: any) => keyof EventsType | null;\r\n        };\r\n    } = {}\r\n): LogicLayer<StateType, EventsType> {\r\n\r\n    const handleEvent = (event: keyof EventsType, payload?: any) => {\r\n        const handler = handlers[event];\r\n        if (handler) {\r\n            const currentState = store.getState();\r\n            const stateUpdate = handler(currentState, payload);\r\n\r\n            if (stateUpdate) {\r\n                store.setState(prev => ({\r\n                    ...prev,\r\n                    ...stateUpdate,\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    const getA11yProps = (elementId: string, state: StateType) => {\r\n        const a11yGenerator = a11yConfig[elementId];\r\n        if (a11yGenerator) {\r\n            return a11yGenerator(state || store.getState());\r\n        }\r\n        return {};\r\n    };\r\n\r\n    const getInteractionHandlers = (elementId: string) => {\r\n        const elementConfig = interactionConfig[elementId] || {};\r\n        const result: Record<string, (event: any) => void> = {};\r\n\r\n        Object.entries(elementConfig).forEach(([eventName, eventHandler]) => {\r\n            result[eventName] = (event: any) => {\r\n                const eventType = eventHandler(store.getState(), event);\r\n                if (eventType) {\r\n                    handleEvent(eventType, event);\r\n                }\r\n            };\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    return {\r\n        handleEvent,\r\n        getA11yProps,\r\n        getInteractionHandlers,\r\n    };\r\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACgBO,SAAS,YAAe,cAA2B;AACtD,MAAI,QAAQ;AACZ,QAAM,YAAY,oBAAI,IAAwB;AAE9C,QAAM,WAAW,MAAM;AAEvB,QAAM,WAAW,CAAC,YAAkC;AAChD,YAAQ,OAAO,YAAY,aACpB,QAA6B,KAAK,IACnC;AAEN,cAAU,QAAQ,cAAY,SAAS,KAAK,CAAC;AAAA,EACjD;AAEA,QAAM,YAAY,CAAC,aAAiC;AAChD,cAAU,IAAI,QAAQ;AACtB,WAAO,MAAM;AACT,gBAAU,OAAO,QAAQ;AAAA,IAC7B;AAAA,EACJ;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;AAQO,SAAS,mBACZ,OACA,UACQ;AACR,QAAM,eAAe,YAAe,SAAS,MAAM,SAAS,CAAC,CAAC;AAE9D,QAAM,UAAU,WAAS;AACrB,UAAM,kBAAkB,SAAS,KAAK;AACtC,iBAAa,SAAS,eAAe;AAAA,EACzC,CAAC;AAED,SAAO;AACX;;;AC3CO,SAAS,iBAIZ,OACA,UAGA,aAEI,CAAC,GACL,oBAII,CAAC,GAC4B;AAEjC,QAAM,cAAc,CAAC,OAAyB,YAAkB;AAC5D,UAAM,UAAU,SAAS,KAAK;AAC9B,QAAI,SAAS;AACT,YAAM,eAAe,MAAM,SAAS;AACpC,YAAM,cAAc,QAAQ,cAAc,OAAO;AAEjD,UAAI,aAAa;AACb,cAAM,SAAS,WAAS;AAAA,UACpB,GAAG;AAAA,UACH,GAAG;AAAA,QACP,EAAE;AAAA,MACN;AAAA,IACJ;AAAA,EACJ;AAEA,QAAM,eAAe,CAAC,WAAmB,UAAqB;AAC1D,UAAM,gBAAgB,WAAW,SAAS;AAC1C,QAAI,eAAe;AACf,aAAO,cAAc,SAAS,MAAM,SAAS,CAAC;AAAA,IAClD;AACA,WAAO,CAAC;AAAA,EACZ;AAEA,QAAM,yBAAyB,CAAC,cAAsB;AAClD,UAAM,gBAAgB,kBAAkB,SAAS,KAAK,CAAC;AACvD,UAAM,SAA+C,CAAC;AAEtD,WAAO,QAAQ,aAAa,EAAE,QAAQ,CAAC,CAAC,WAAW,YAAY,MAAM;AACjE,aAAO,SAAS,IAAI,CAAC,UAAe;AAChC,cAAM,YAAY,aAAa,MAAM,SAAS,GAAG,KAAK;AACtD,YAAI,WAAW;AACX,sBAAY,WAAW,KAAK;AAAA,QAChC;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;;;AFtEO,IAAM,UAAU;","names":[]}