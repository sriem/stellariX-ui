{"version":3,"sources":["../src/index.ts","../src/state.ts","../src/logic.ts"],"sourcesContent":["/**\r\n * StellarIX UI Core\r\n * Framework-agnostic implementation of UI components\r\n */\r\n\r\n// Re-export from submodules\r\nexport * from './state';\r\nexport * from './logic';\r\nexport * from './types';\r\n\r\n// Version\r\nexport const VERSION = '0.0.1'; ","/**\r\n * State Management System\r\n * Framework-agnostic reactive state management\r\n */\r\n\r\nexport interface Store<T> {\r\n    getState: () => T;\r\n    setState: (updater: T | ((prev: T) => T)) => void;\r\n    subscribe: (listener: (state: T) => void) => () => void;\r\n}\r\n\r\n/**\r\n * Creates a reactive store with the given initial state\r\n * @param initialState The initial state\r\n * @returns A store object with methods to get, set, and subscribe to state\r\n */\r\nexport function createStore<T>(initialState: T): Store<T> {\r\n    let state = initialState;\r\n    const listeners = new Set<(state: T) => void>();\r\n\r\n    const getState = () => state;\r\n\r\n    const setState = (updater: T | ((prev: T) => T)) => {\r\n        state = typeof updater === 'function'\r\n            ? (updater as ((prev: T) => T))(state)\r\n            : updater;\r\n\r\n        listeners.forEach(listener => listener(state));\r\n    };\r\n\r\n    const subscribe = (listener: (state: T) => void) => {\r\n        listeners.add(listener);\r\n        return () => {\r\n            listeners.delete(listener);\r\n        };\r\n    };\r\n\r\n    return {\r\n        getState,\r\n        setState,\r\n        subscribe,\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a derived store based on a selector function\r\n * @param store The source store\r\n * @param selector A function to derive values from the source store\r\n * @returns A store with the derived state\r\n */\r\nexport function createDerivedStore<T, U>(\r\n    store: Store<T>,\r\n    selector: (state: T) => U\r\n): Store<U> {\r\n    const derivedStore = createStore<U>(selector(store.getState()));\r\n\r\n    store.subscribe(state => {\r\n        const newDerivedState = selector(state);\r\n        derivedStore.setState(newDerivedState);\r\n    });\r\n\r\n    return derivedStore;\r\n} ","/**\r\n * Logic Layer\r\n * Ultra-generic behavioral logic and accessibility system for any framework\r\n */\r\n\r\nimport type { Store } from './state.js';\r\n\r\n/**\r\n * Ultra-generic logic interface\r\n * Designed to be adaptable to any framework or use case\r\n */\r\nexport interface LogicLayer<TState = any, TEvents extends Record<string, any> = Record<string, any>> {\r\n  handleEvent(event: keyof TEvents | string, payload?: any): void;\r\n  getA11yProps(elementId: string): Record<string, any>;\r\n  getInteractionHandlers(elementId: string): Record<string, Function>;\r\n  initialize(): void;\r\n  cleanup(): void;\r\n  connect(stateStore: Store<TState>): void;\r\n}\r\n\r\n/**\r\n * Event handler function type\r\n */\r\nexport type EventHandler<TState, TPayload = any> = (\r\n  state: TState,\r\n  payload: TPayload\r\n) => Partial<TState> | null | void;\r\n\r\n/**\r\n * Accessibility props generator function type\r\n */\r\nexport type A11yPropsGenerator<TState> = (state: TState) => Record<string, any>;\r\n\r\n/**\r\n * Interaction handler generator function type\r\n */\r\nexport type InteractionHandler<TState> = (\r\n  state: TState,\r\n  event: any\r\n) => string | null;\r\n\r\n/**\r\n * Logic layer configuration\r\n */\r\nexport interface LogicLayerConfig<TState, TEvents> {\r\n  /**\r\n   * Event handlers mapping\r\n   */\r\n  eventHandlers?: {\r\n    [K in keyof TEvents]?: EventHandler<TState, TEvents[K]>;\r\n  };\r\n\r\n  /**\r\n   * Accessibility configuration for elements\r\n   */\r\n  a11yConfig?: {\r\n    [elementId: string]: A11yPropsGenerator<TState>;\r\n  };\r\n\r\n  /**\r\n   * Interaction configuration for elements\r\n   */\r\n  interactionConfig?: {\r\n    [elementId: string]: {\r\n      [eventName: string]: InteractionHandler<TState>;\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Custom initialization logic\r\n   */\r\n  onInitialize?: (stateStore: Store<TState>) => void;\r\n\r\n  /**\r\n   * Custom cleanup logic\r\n   */\r\n  onCleanup?: () => void;\r\n}\r\n\r\n/**\r\n * Creates an ultra-generic logic layer\r\n * Can be adapted to any framework or component system\r\n */\r\nexport function createLogicLayer<\r\n  TState = any,\r\n  TEvents extends Record<string, any> = Record<string, any>\r\n>(\r\n  config: LogicLayerConfig<TState, TEvents> = {}\r\n): LogicLayer<TState, TEvents> {\r\n  let connectedStore: Store<TState> | null = null;\r\n  let isInitialized = false;\r\n\r\n  const {\r\n    eventHandlers = {},\r\n    a11yConfig = {},\r\n    interactionConfig = {},\r\n    onInitialize,\r\n    onCleanup,\r\n  } = config;\r\n\r\n  const handleEvent = (event: string, payload?: any): void => {\r\n    if (!connectedStore) {\r\n      console.warn(`Logic layer not connected. Event \"${event}\" ignored.`);\r\n      return;\r\n    }\r\n\r\n    const handler = (eventHandlers as any)[event];\r\n    if (handler) {\r\n      const currentState = connectedStore.getState();\r\n      const stateUpdate = handler(currentState, payload);\r\n\r\n      if (stateUpdate && typeof stateUpdate === 'object') {\r\n        connectedStore.setState(prev => ({\r\n          ...prev,\r\n          ...stateUpdate,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const getA11yProps = (elementId: string): Record<string, any> => {\r\n    if (!connectedStore) {\r\n      return {};\r\n    }\r\n\r\n    const a11yGenerator = a11yConfig[elementId];\r\n    if (a11yGenerator) {\r\n      return a11yGenerator(connectedStore.getState());\r\n    }\r\n    return {};\r\n  };\r\n\r\n  const getInteractionHandlers = (elementId: string): Record<string, Function> => {\r\n    if (!connectedStore) {\r\n      return {};\r\n    }\r\n\r\n    const elementConfig = interactionConfig[elementId] || {};\r\n    const result: Record<string, Function> = {};\r\n\r\n    Object.entries(elementConfig).forEach(([eventName, eventHandler]) => {\r\n      result[eventName] = (event: any) => {\r\n        if (connectedStore) {\r\n          const eventType = eventHandler(connectedStore.getState(), event);\r\n          if (eventType) {\r\n            handleEvent(eventType, event);\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    return result;\r\n  };\r\n\r\n  const initialize = (): void => {\r\n    if (isInitialized || !connectedStore) {\r\n      return;\r\n    }\r\n\r\n    if (onInitialize) {\r\n      onInitialize(connectedStore);\r\n    }\r\n\r\n    isInitialized = true;\r\n  };\r\n\r\n  const cleanup = (): void => {\r\n    if (!isInitialized) {\r\n      return;\r\n    }\r\n\r\n    if (onCleanup) {\r\n      onCleanup();\r\n    }\r\n\r\n    connectedStore = null;\r\n    isInitialized = false;\r\n  };\r\n\r\n  const connect = (stateStore: Store<TState>): void => {\r\n    if (connectedStore) {\r\n      cleanup();\r\n    }\r\n\r\n    connectedStore = stateStore;\r\n  };\r\n\r\n  return {\r\n    handleEvent,\r\n    getA11yProps,\r\n    getInteractionHandlers,\r\n    initialize,\r\n    cleanup,\r\n    connect,\r\n  };\r\n}\r\n\r\n/**\r\n * Logic layer builder for complex configurations\r\n */\r\nexport class LogicLayerBuilder<TState = any, TEvents extends Record<string, any> = Record<string, any>> {\r\n  private config: LogicLayerConfig<TState, TEvents> = {};\r\n\r\n  /**\r\n   * Add event handler\r\n   */\r\n  onEvent<K extends keyof TEvents>(\r\n    event: K,\r\n    handler: EventHandler<TState, TEvents[K]>\r\n  ): this {\r\n    if (!this.config.eventHandlers) {\r\n      this.config.eventHandlers = {};\r\n    }\r\n    this.config.eventHandlers[event] = handler;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add accessibility config for element\r\n   */\r\n  withA11y(elementId: string, generator: A11yPropsGenerator<TState>): this {\r\n    if (!this.config.a11yConfig) {\r\n      this.config.a11yConfig = {};\r\n    }\r\n    this.config.a11yConfig[elementId] = generator;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add interaction handler for element\r\n   */\r\n  withInteraction(\r\n    elementId: string,\r\n    eventName: string,\r\n    handler: InteractionHandler<TState>\r\n  ): this {\r\n    if (!this.config.interactionConfig) {\r\n      this.config.interactionConfig = {};\r\n    }\r\n    if (!this.config.interactionConfig[elementId]) {\r\n      this.config.interactionConfig[elementId] = {};\r\n    }\r\n    this.config.interactionConfig[elementId][eventName] = handler;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add initialization logic\r\n   */\r\n  onInitialize(callback: (stateStore: Store<TState>) => void): this {\r\n    this.config.onInitialize = callback;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add cleanup logic\r\n   */\r\n  onCleanup(callback: () => void): this {\r\n    this.config.onCleanup = callback;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Build the logic layer\r\n   */\r\n  build(): LogicLayer<TState, TEvents> {\r\n    return createLogicLayer(this.config);\r\n  }\r\n}\r\n\r\n/**\r\n * Legacy compatibility - will be deprecated\r\n * @deprecated Use createLogicLayer instead\r\n */\r\nexport interface LogicLayer_Legacy<StateType, EventsType = Record<string, any>> {\r\n  handleEvent: (event: keyof EventsType, payload?: any) => void;\r\n  getA11yProps: (elementId: string, state: StateType) => Record<string, any>;\r\n  getInteractionHandlers: (elementId: string) => Record<string, (event: any) => void>;\r\n}"],"mappings":"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","names":[]}