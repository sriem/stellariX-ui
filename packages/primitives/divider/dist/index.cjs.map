{"version":3,"sources":["../src/index.ts","../src/state.ts","../src/logic.ts"],"sourcesContent":["/**\r\n * Divider Component\r\n * Main entry point and public API\r\n */\r\n\r\nimport { createPrimitive } from '@stellarix/core';\r\nimport { createDividerState } from './state';\r\nimport { createDividerLogic } from './logic';\r\nimport type { DividerOptions, DividerState, DividerEvents } from './types';\r\n\r\n/**\r\n * Creates a divider component factory\r\n * @param options Component options\r\n * @returns Component factory\r\n */\r\nexport function createDivider(options: DividerOptions = {}) {\r\n    return createPrimitive<DividerState, DividerEvents, DividerOptions>('Divider', {\r\n        initialState: options,\r\n        logicConfig: options,\r\n        metadata: {\r\n            accessibility: {\r\n                role: 'separator',\r\n                keyboardShortcuts: [],\r\n                ariaAttributes: ['aria-orientation', 'aria-label'],\r\n                wcagLevel: 'AA',\r\n                patterns: ['divider', 'separator']\r\n            },\r\n            events: {\r\n                supported: [],\r\n                required: [],\r\n                custom: {}\r\n            },\r\n            structure: {\r\n                elements: {\r\n                    'root': {\r\n                        type: 'hr',\r\n                        role: 'separator',\r\n                        optional: false\r\n                    },\r\n                    'label': {\r\n                        type: 'span',\r\n                        role: 'presentation',\r\n                        optional: true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Create the component with actual implementation\r\n * This connects the state and logic layers\r\n */\r\nexport function createDividerWithImplementation(options: DividerOptions = {}) {\r\n    const core = createDivider(options);\r\n    \r\n    // Attach the actual implementation\r\n    core.state = createDividerState(options);\r\n    core.logic = createDividerLogic(core.state as any, options);\r\n    \r\n    return core;\r\n}\r\n\r\n// Re-export types\r\nexport type { \r\n    DividerOptions, \r\n    DividerState, \r\n    DividerEvents, \r\n    DividerProps,\r\n    DividerOrientation,\r\n    DividerVariant,\r\n    DividerLabelPosition\r\n} from './types';\r\n\r\nexport type { DividerStateStore } from './state';\r\n\r\n// Default export for convenience\r\nexport default createDividerWithImplementation;","/**\r\n * Divider Component State Management\r\n * Ultra-generic state implementation\r\n */\r\n\r\nimport { createComponentState } from '@stellarix/core';\r\nimport type { DividerState, DividerOptions, DividerOrientation, DividerVariant, DividerLabelPosition } from './types';\r\n\r\n/**\r\n * Extended state store with component-specific methods\r\n */\r\nexport interface DividerStateStore {\r\n    // Core state methods\r\n    getState: () => DividerState;\r\n    setState: (updater: DividerState | ((prev: DividerState) => DividerState)) => void;\r\n    subscribe: (listener: (state: DividerState) => void) => () => void;\r\n    derive: <U>(selector: (state: DividerState) => U) => {\r\n        get: () => U;\r\n        subscribe: (listener: (value: U) => void) => () => void;\r\n    };\r\n    \r\n    // Component-specific methods\r\n    setOrientation: (orientation: DividerOrientation) => void;\r\n    setVariant: (variant: DividerVariant) => void;\r\n    setLabelPosition: (position: DividerLabelPosition) => void;\r\n    updateLabel: (hasLabel: boolean) => void;\r\n    \r\n    // Computed properties\r\n    isHorizontal: () => boolean;\r\n    isVertical: () => boolean;\r\n}\r\n\r\n/**\r\n * Creates the divider component state\r\n * @param options Initial options\r\n * @returns Extended state store\r\n */\r\nexport function createDividerState(options: DividerOptions = {}): DividerStateStore {\r\n    // Define initial state\r\n    const initialState: DividerState = {\r\n        orientation: options.orientation ?? 'horizontal',\r\n        variant: options.variant ?? 'solid',\r\n        hasLabel: Boolean(options.label),\r\n        labelPosition: options.labelPosition ?? 'center',\r\n    };\r\n    \r\n    // Create the core state store\r\n    const store = createComponentState('Divider', initialState);\r\n    \r\n    // Extend with component-specific methods\r\n    const extendedStore: DividerStateStore = {\r\n        ...store,\r\n        \r\n        // Convenience setters\r\n        setOrientation: (orientation: DividerOrientation) => {\r\n            store.setState(prev => ({ ...prev, orientation }));\r\n        },\r\n        \r\n        setVariant: (variant: DividerVariant) => {\r\n            store.setState(prev => ({ ...prev, variant }));\r\n        },\r\n        \r\n        setLabelPosition: (position: DividerLabelPosition) => {\r\n            store.setState(prev => ({ ...prev, labelPosition: position }));\r\n        },\r\n        \r\n        updateLabel: (hasLabel: boolean) => {\r\n            store.setState(prev => ({ ...prev, hasLabel }));\r\n        },\r\n        \r\n        // Computed properties\r\n        isHorizontal: () => {\r\n            const state = store.getState();\r\n            return state.orientation === 'horizontal';\r\n        },\r\n        \r\n        isVertical: () => {\r\n            const state = store.getState();\r\n            return state.orientation === 'vertical';\r\n        },\r\n    };\r\n    \r\n    return extendedStore;\r\n}","/**\r\n * Divider Component Logic\r\n * Business logic and event handling\r\n */\r\n\r\nimport type { LogicLayer } from '@stellarix/core';\r\nimport type { DividerState, DividerEvents, DividerOptions } from './types';\r\nimport type { DividerStateStore } from './state';\r\n\r\n/**\r\n * Creates the divider component logic\r\n * @param state State store to connect to\r\n * @param options Component options\r\n * @returns Logic layer for the component\r\n */\r\nexport function createDividerLogic(\r\n    state: DividerStateStore,\r\n    options: DividerOptions = {}\r\n): LogicLayer<DividerState, DividerEvents> {\r\n    // Since we need to access the component-specific logic methods,\r\n    // we'll create a custom implementation\r\n    let connectedStore: DividerStateStore | null = null;\r\n    let initialized = false;\r\n    \r\n    const logic: LogicLayer<DividerState, DividerEvents> = {\r\n        handleEvent: () => {\r\n            // Divider has no events\r\n        },\r\n        \r\n        getA11yProps: (elementId: string) => {\r\n            if (!connectedStore || !initialized) return {};\r\n            \r\n            const currentState = connectedStore.getState();\r\n            \r\n            if (elementId === 'root') {\r\n                const a11yProps: Record<string, any> = {\r\n                    'role': 'separator',\r\n                    'aria-orientation': currentState.orientation,\r\n                };\r\n                \r\n                // Add label if provided\r\n                if (options.label) {\r\n                    a11yProps['aria-label'] = options.label;\r\n                }\r\n                \r\n                return a11yProps;\r\n            }\r\n            \r\n            if (elementId === 'label') {\r\n                return {\r\n                    'aria-hidden': 'true',\r\n                };\r\n            }\r\n            \r\n            return {};\r\n        },\r\n        \r\n        getInteractionHandlers: (elementId: string) => {\r\n            if (!connectedStore || !initialized) return {};\r\n            \r\n            const currentState = connectedStore.getState();\r\n            \r\n            if (elementId === 'root') {\r\n                const styles: Record<string, any> = {};\r\n                \r\n                // Apply orientation-specific styles\r\n                if (currentState.orientation === 'horizontal') {\r\n                    styles.width = '100%';\r\n                    styles.height = options.thickness || '1px';\r\n                    styles.marginTop = options.spacing || '1rem';\r\n                    styles.marginBottom = options.spacing || '1rem';\r\n                } else {\r\n                    styles.height = '100%';\r\n                    styles.width = options.thickness || '1px';\r\n                    styles.marginLeft = options.spacing || '1rem';\r\n                    styles.marginRight = options.spacing || '1rem';\r\n                }\r\n                \r\n                // Apply variant styles\r\n                if (currentState.variant === 'dashed') {\r\n                    styles.borderStyle = 'dashed';\r\n                } else if (currentState.variant === 'dotted') {\r\n                    styles.borderStyle = 'dotted';\r\n                }\r\n                \r\n                // Apply color if provided\r\n                if (options.color) {\r\n                    styles.backgroundColor = options.color;\r\n                    styles.borderColor = options.color;\r\n                }\r\n                \r\n                return {\r\n                    style: styles,\r\n                    'data-orientation': currentState.orientation,\r\n                    'data-variant': currentState.variant,\r\n                    'data-has-label': currentState.hasLabel,\r\n                };\r\n            }\r\n            \r\n            if (elementId === 'label') {\r\n                return {\r\n                    'data-position': currentState.labelPosition,\r\n                };\r\n            }\r\n            \r\n            return {};\r\n        },\r\n        \r\n        initialize: () => {\r\n            initialized = true;\r\n        },\r\n        \r\n        cleanup: () => {\r\n            initialized = false;\r\n            connectedStore = null;\r\n        },\r\n        \r\n        connect: (stateStore: any) => {\r\n            connectedStore = stateStore as DividerStateStore;\r\n        },\r\n        \r\n        // Additional properties for backward compatibility\r\n        events: {},\r\n    };\r\n    \r\n    return logic;\r\n}"],"mappings":"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","names":["src_exports","__export","createDivider","createDividerWithImplementation","src_default","__toCommonJS","import_core","import_core","createDividerState","options","initialState","store","orientation","prev","variant","position","hasLabel","createDividerLogic","state","options","connectedStore","initialized","elementId","currentState","a11yProps","styles","stateStore","createDivider","options","createDividerWithImplementation","core","createDividerState","createDividerLogic","src_default"]}