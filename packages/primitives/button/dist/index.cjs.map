{"version":3,"sources":["../src/index.ts","../src/state.ts","../src/logic.ts"],"sourcesContent":["import { createPrimitive } from '@stellarix/core';\r\nimport { createButtonState } from './state.js';\r\nimport { createButtonLogic } from './logic.js';\r\nimport type { ButtonOptions, ButtonState, ButtonEvents } from './types.js';\r\n\r\nexport function createButton(options: ButtonOptions = {}) {\r\n    return createPrimitive<ButtonState, ButtonEvents, ButtonOptions>('Button', {\r\n        initialState: options,\r\n        logicConfig: options,\r\n        metadata: {\r\n            accessibility: {\r\n                roles: ['button'],\r\n                keyboardSupport: ['Enter', 'Space'],\r\n                ariaAttributes: ['aria-pressed', 'aria-disabled', 'aria-busy'],\r\n                wcagLevel: 'AA'\r\n            },\r\n            events: {\r\n                supported: ['click', 'focus', 'blur', 'keydown'],\r\n                required: [],\r\n                bubbles: ['click']\r\n            },\r\n            structure: {\r\n                elements: ['root'],\r\n                compound: false\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Create the component factory with proper state and logic\r\nexport function createButtonWithImplementation(options: ButtonOptions = {}) {\r\n    const core = createButton(options);\r\n    \r\n    // Attach the actual implementation\r\n    core.state = createButtonState(options);\r\n    core.logic = createButtonLogic(core.state as any, options);\r\n    \r\n    return core;\r\n}\r\n\r\n// Re-export types\r\nexport type { ButtonOptions, ButtonState, ButtonEvents, ButtonProps } from './types.js';\r\nexport type { ButtonStateStore } from './state.js';\r\n\r\n// Default export for convenience\r\nexport default createButtonWithImplementation;","import { createComponentState } from '@stellarix/core';\r\nimport type { ButtonState, ButtonOptions } from './types.js';\r\n\r\nexport function createButtonState(options: ButtonOptions) {\r\n    const initialState: ButtonState = {\r\n        pressed: false,\r\n        focused: false,\r\n        disabled: options.disabled || false,\r\n        loading: options.loading || false,\r\n        variant: options.variant || 'default',\r\n        size: options.size || 'md'\r\n    };\r\n\r\n    const store = createComponentState('Button', initialState);\r\n\r\n    // Extended API for button-specific state management\r\n    return {\r\n        ...store,\r\n        \r\n        // Button-specific state methods\r\n        setPressed: (pressed: boolean) => {\r\n            store.setState(prev => ({ ...prev, pressed }));\r\n        },\r\n        \r\n        setFocused: (focused: boolean) => {\r\n            store.setState(prev => ({ ...prev, focused }));\r\n        },\r\n        \r\n        setDisabled: (disabled: boolean) => {\r\n            store.setState(prev => ({ ...prev, disabled }));\r\n        },\r\n        \r\n        setLoading: (loading: boolean) => {\r\n            store.setState(prev => ({ ...prev, loading }));\r\n        },\r\n        \r\n        setVariant: (variant: ButtonState['variant']) => {\r\n            store.setState(prev => ({ ...prev, variant }));\r\n        },\r\n        \r\n        setSize: (size: ButtonState['size']) => {\r\n            store.setState(prev => ({ ...prev, size }));\r\n        },\r\n        \r\n        // Computed properties\r\n        isInteractive: store.derive(state => !state.disabled && !state.loading),\r\n        classes: store.derive(state => ({\r\n            base: 'stellarix-button',\r\n            variant: `stellarix-button--${state.variant}`,\r\n            size: `stellarix-button--${state.size}`,\r\n            disabled: state.disabled ? 'stellarix-button--disabled' : '',\r\n            loading: state.loading ? 'stellarix-button--loading' : '',\r\n            pressed: state.pressed ? 'stellarix-button--pressed' : '',\r\n            focused: state.focused ? 'stellarix-button--focused' : ''\r\n        }))\r\n    };\r\n}\r\n\r\nexport type ButtonStateStore = ReturnType<typeof createButtonState>;","import { createComponentLogic } from '@stellarix/core';\r\nimport { generateComponentId } from '@stellarix/utils';\r\nimport type { ButtonState, ButtonEvents, ButtonOptions } from './types.js';\r\nimport type { ButtonStateStore } from './state.js';\r\n\r\nexport function createButtonLogic(\r\n    state: ButtonStateStore,\r\n    options: ButtonOptions\r\n) {\r\n    const componentId = generateComponentId('button');\r\n    \r\n    return createComponentLogic<ButtonState, ButtonEvents>('Button', {\r\n        events: {\r\n            click: (payload: { event: MouseEvent }) => {\r\n                const currentState = state.getState();\r\n                \r\n                // Don't handle click if disabled or loading\r\n                if (currentState.disabled || currentState.loading) {\r\n                    payload.event.preventDefault();\r\n                    return;\r\n                }\r\n                \r\n                // Call external onClick handler\r\n                if (options.onClick) {\r\n                    options.onClick(payload.event);\r\n                }\r\n            },\r\n            \r\n            focus: (payload: { event: FocusEvent }) => {\r\n                state.setFocused(true);\r\n                \r\n                if (options.onFocus) {\r\n                    options.onFocus(payload.event);\r\n                }\r\n            },\r\n            \r\n            blur: (payload: { event: FocusEvent }) => {\r\n                state.setFocused(false);\r\n                \r\n                if (options.onBlur) {\r\n                    options.onBlur(payload.event);\r\n                }\r\n            },\r\n            \r\n            keydown: (payload: { event: KeyboardEvent }) => {\r\n                const currentState = state.getState();\r\n                \r\n                // Handle Space and Enter keys\r\n                if (payload.event.key === ' ' || payload.event.key === 'Enter') {\r\n                    if (!currentState.disabled && !currentState.loading) {\r\n                        payload.event.preventDefault();\r\n                        \r\n                        // Simulate click\r\n                        if (options.onClick) {\r\n                            const syntheticEvent = new MouseEvent('click', {\r\n                                bubbles: true,\r\n                                cancelable: true\r\n                            });\r\n                            options.onClick(syntheticEvent);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n        a11y: {\r\n            root: (state) => ({\r\n                role: 'button',\r\n                'aria-pressed': state.pressed,\r\n                'aria-disabled': state.disabled,\r\n                'aria-busy': state.loading,\r\n                tabIndex: state.disabled ? -1 : 0,\r\n                id: componentId\r\n            })\r\n        },\r\n        \r\n        interactions: {\r\n            root: (_currentState) => ({\r\n                onClick: (event: MouseEvent) => {\r\n                    // This will trigger the 'click' event handler\r\n                    return event;\r\n                },\r\n                onFocus: (event: FocusEvent) => {\r\n                    // This will trigger the 'focus' event handler\r\n                    return event;\r\n                },\r\n                onBlur: (event: FocusEvent) => {\r\n                    // This will trigger the 'blur' event handler\r\n                    return event;\r\n                },\r\n                onKeyDown: (event: KeyboardEvent) => {\r\n                    // This will trigger the 'keydown' event handler\r\n                    return event;\r\n                },\r\n                onMouseDown: (_event: MouseEvent) => {\r\n                    const currentState = state.getState();\r\n                    if (!currentState.disabled && !currentState.loading) {\r\n                        state.setPressed(true);\r\n                    }\r\n                },\r\n                onMouseUp: (_event: MouseEvent) => {\r\n                    state.setPressed(false);\r\n                },\r\n                onMouseLeave: (_event: MouseEvent) => {\r\n                    state.setPressed(false);\r\n                }\r\n            })\r\n        }\r\n    });\r\n}"],"mappings":"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","names":["src_exports","__export","createButton","createButtonWithImplementation","src_default","__toCommonJS","import_core","import_core","createButtonState","options","initialState","store","pressed","prev","focused","disabled","loading","variant","size","state","import_core","import_utils","createButtonLogic","state","options","componentId","payload","currentState","syntheticEvent","_currentState","event","_event","createButton","options","createButtonWithImplementation","core","createButtonState","createButtonLogic","src_default"]}