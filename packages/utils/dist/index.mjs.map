{"version":3,"sources":["../src/dom.ts","../src/accessibility.ts","../src/object.ts","../src/index.ts"],"sourcesContent":["/**\r\n * DOM Utilities\r\n * Helper functions for DOM manipulation\r\n */\r\n\r\n/**\r\n * Checks if the current environment is a browser\r\n * @returns True if in a browser environment, false otherwise\r\n */\r\nexport const isBrowser = () => typeof window !== 'undefined';\r\n\r\n/**\r\n * Gets an element by ID with proper typing\r\n * @param id Element ID\r\n * @returns The element or null if not found\r\n */\r\nexport function getElementById<T extends HTMLElement = HTMLElement>(id: string): T | null {\r\n    return isBrowser() ? document.getElementById(id) as T | null : null;\r\n}\r\n\r\n/**\r\n * Focuses an element with proper error handling\r\n * @param element The element to focus\r\n * @returns True if focus was successful, false otherwise\r\n */\r\nexport function focusElement(element: HTMLElement | null): boolean {\r\n    if (element && typeof element.focus === 'function') {\r\n        try {\r\n            element.focus();\r\n            return document.activeElement === element;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Creates a DOM element with attributes and properties\r\n * @param tagName HTML tag name\r\n * @param attributes Attributes to set\r\n * @returns The created element\r\n */\r\nexport function createElement<T extends HTMLElement>(\r\n    tagName: string,\r\n    attributes: Record<string, string> = {}\r\n): T {\r\n    const element = document.createElement(tagName) as T;\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n        element.setAttribute(key, value);\r\n    });\r\n\r\n    return element;\r\n}\r\n\r\n/**\r\n * Adds a global event listener that can be safely removed\r\n * @param eventName Event name\r\n * @param handler Event handler\r\n * @param options Event listener options\r\n * @returns Function to remove the event listener\r\n */\r\nexport function addGlobalEventListener<K extends keyof WindowEventMap>(\r\n    eventName: K,\r\n    handler: (event: WindowEventMap[K]) => void,\r\n    options?: boolean | AddEventListenerOptions\r\n): () => void {\r\n    if (!isBrowser()) return () => { };\r\n\r\n    window.addEventListener(eventName, handler as EventListener, options);\r\n    return () => {\r\n        window.removeEventListener(eventName, handler as EventListener, options);\r\n    };\r\n} ","/**\r\n * Accessibility Utilities\r\n * Helper functions for WCAG compliance and accessibility\r\n */\r\n\r\nimport { isBrowser } from './dom';\r\n\r\n/**\r\n * ARIA roles\r\n */\r\nexport enum AriaRole {\r\n    Button = 'button',\r\n    Checkbox = 'checkbox',\r\n    Dialog = 'dialog',\r\n    ListBox = 'listbox',\r\n    Menu = 'menu',\r\n    MenuItem = 'menuitem',\r\n    Option = 'option',\r\n    Switch = 'switch',\r\n    Tab = 'tab',\r\n    TabList = 'tablist',\r\n    TabPanel = 'tabpanel',\r\n    Toolbar = 'toolbar',\r\n}\r\n\r\n/**\r\n * Creates aria attributes for a button\r\n * @param isPressed Whether the button is pressed\r\n * @param isDisabled Whether the button is disabled\r\n * @returns ARIA attributes\r\n */\r\nexport function getButtonA11yProps(isPressed?: boolean, isDisabled?: boolean) {\r\n    return {\r\n        role: AriaRole.Button,\r\n        'aria-pressed': isPressed ? 'true' : undefined,\r\n        'aria-disabled': isDisabled ? 'true' : undefined,\r\n    };\r\n}\r\n\r\n/**\r\n * Creates aria attributes for a checkbox\r\n * @param checked Whether the checkbox is checked\r\n * @param isDisabled Whether the checkbox is disabled\r\n * @returns ARIA attributes\r\n */\r\nexport function getCheckboxA11yProps(checked?: boolean, isDisabled?: boolean) {\r\n    return {\r\n        role: AriaRole.Checkbox,\r\n        'aria-checked': typeof checked === 'boolean' ? String(checked) : undefined,\r\n        'aria-disabled': isDisabled ? 'true' : undefined,\r\n    };\r\n}\r\n\r\n/**\r\n * Gets the first focusable element in a container\r\n * @param container The container element\r\n * @returns The first focusable element or null\r\n */\r\nexport function getFirstFocusableElement(container: HTMLElement): HTMLElement | null {\r\n    if (!isBrowser() || !container) return null;\r\n\r\n    const focusableElements = container.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n    );\r\n\r\n    return focusableElements.length > 0 ? focusableElements[0] as HTMLElement : null;\r\n}\r\n\r\n/**\r\n * Creates a focus trap within a container\r\n * @param container The container element\r\n * @returns Functions to activate and deactivate the focus trap\r\n */\r\nexport function createFocusTrap(container: HTMLElement | null) {\r\n    if (!isBrowser() || !container) {\r\n        return {\r\n            activate: () => { },\r\n            deactivate: () => { },\r\n        };\r\n    }\r\n\r\n    let previouslyFocusedElement: HTMLElement | null = null;\r\n\r\n    const focusableElements = container.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n    );\r\n\r\n    const firstElement = focusableElements[0] as HTMLElement | undefined;\r\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement | undefined;\r\n\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (event.key !== 'Tab') return;\r\n\r\n        if (!firstElement || !lastElement) return;\r\n\r\n        if (event.shiftKey) {\r\n            if (document.activeElement === firstElement) {\r\n                lastElement.focus();\r\n                event.preventDefault();\r\n            }\r\n        } else {\r\n            if (document.activeElement === lastElement) {\r\n                firstElement.focus();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        activate: () => {\r\n            previouslyFocusedElement = document.activeElement as HTMLElement;\r\n            container.addEventListener('keydown', handleKeyDown);\r\n            if (firstElement) {\r\n                firstElement.focus();\r\n            }\r\n        },\r\n        deactivate: () => {\r\n            container.removeEventListener('keydown', handleKeyDown);\r\n            if (previouslyFocusedElement) {\r\n                previouslyFocusedElement.focus();\r\n            }\r\n        },\r\n    };\r\n} ","/**\r\n * Object Utilities\r\n * Helper functions for object manipulation\r\n */\r\n\r\n/**\r\n * Deep merges two objects\r\n * @param target Target object\r\n * @param source Source object\r\n * @returns Merged object\r\n */\r\nexport function deepMerge<T extends Record<string, any>, U extends Record<string, any>>(\r\n    target: T,\r\n    source: U\r\n): T & U {\r\n    const output = { ...target } as T & U;\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        Object.keys(source).forEach(key => {\r\n            if (isObject(source[key])) {\r\n                if (!(key in target)) {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                } else {\r\n                    output[key as keyof (T & U)] = deepMerge(\r\n                        target[key],\r\n                        source[key]\r\n                    ) as any;\r\n                }\r\n            } else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\n/**\r\n * Checks if a value is an object\r\n * @param item Value to check\r\n * @returns Whether the value is an object\r\n */\r\nexport function isObject(item: any): item is Record<string, any> {\r\n    return item !== null && typeof item === 'object' && !Array.isArray(item);\r\n}\r\n\r\n/**\r\n * Omits specified keys from an object\r\n * @param obj Source object\r\n * @param keys Keys to omit\r\n * @returns New object without the specified keys\r\n */\r\nexport function omit<T extends Record<string, any>, K extends keyof T>(\r\n    obj: T,\r\n    keys: K[]\r\n): Omit<T, K> {\r\n    const result = { ...obj };\r\n    keys.forEach(key => {\r\n        delete result[key];\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * Picks specified keys from an object\r\n * @param obj Source object\r\n * @param keys Keys to pick\r\n * @returns New object with only the specified keys\r\n */\r\nexport function pick<T extends Record<string, any>, K extends keyof T>(\r\n    obj: T,\r\n    keys: K[]\r\n): Pick<T, K> {\r\n    const result = {} as Pick<T, K>;\r\n    keys.forEach(key => {\r\n        if (key in obj) {\r\n            result[key] = obj[key];\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * Creates a memoized version of a function\r\n * @param fn Function to memoize\r\n * @returns Memoized function\r\n */\r\nexport function memoize<T extends (...args: any[]) => any>(fn: T): T {\r\n    const cache = new Map();\r\n\r\n    return ((...args: any[]) => {\r\n        const key = JSON.stringify(args);\r\n        if (cache.has(key)) {\r\n            return cache.get(key);\r\n        }\r\n\r\n        const result = fn(...args);\r\n        cache.set(key, result);\r\n        return result;\r\n    }) as T;\r\n} ","/**\r\n * StellarIX UI Utils\r\n * Utility functions for the StellarIX UI framework\r\n */\r\n\r\nexport * from './dom';\r\nexport * from './accessibility';\r\nexport * from './object';\r\n\r\n// Version\r\nexport const VERSION = '0.0.1'; "],"mappings":"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","names":["isBrowser","getElementById","id","focusElement","element","e","createElement","tagName","attributes","key","value","addGlobalEventListener","eventName","handler","options","AriaRole","getButtonA11yProps","isPressed","isDisabled","getCheckboxA11yProps","checked","getFirstFocusableElement","container","isBrowser","focusableElements","createFocusTrap","previouslyFocusedElement","firstElement","lastElement","handleKeyDown","event","deepMerge","target","source","output","isObject","key","item","omit","obj","keys","result","pick","memoize","fn","cache","args","VERSION"]}